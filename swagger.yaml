swagger: '2.0'
info:
  description: 'Test API'
  version: "0.1.0"
  title: Test API
  contact:
    email: l.ruczkowski@gmail.con
  license:
    name: Proprietary

tags:
- name: users
  description: Users collection
- name: auth
  description: Organizations collection

# Reusable parameters
parameters:
  accessToken:
    name: Bearer authorization header
    in: header
    description: Example = "Bearer abcd"
    type: string
    required: true

paths:
  /users:
    get:
      tags:
      - users
      summary: Get list of users
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/accessToken'
      responses:
        200:
          description: 'Returns list of users'
          schema:
            type: array
            items:
              $ref: '#/definitions/UserModel'

    post:
      tags:
      - users
      summary: Create user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/accessToken'
      - name: User
        in: body
        description: User object
        required: true
        schema:
          $ref: '#/definitions/UserObjectCreate'
      responses:
        201:
          $ref: '#/definitions/UserModel'

  /users/{id}:
    get:
      tags:
      - users
      summary: Get user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/accessToken'
      - in: path
        name: id
        description: User ID
        required: true
        type: string
      responses:
        200:
          $ref: '#/definitions/UserModel'

    put:
      tags:
      - users
      summary: Update user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/accessToken'
      - in: path
        name: id
        description: User ID
        required: true
        type: string
      - name: User
        in: body
        description: User object
        required: true
        schema:
          $ref: '#/definitions/UserObjectCreate'
      responses:
        200:
          $ref: '#/definitions/UserModel'

    delete:
      tags:
      - users
      summary: Delete user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/accessToken'
      - in: path
        name: id
        description: User ID
        required: true
        type: string
      responses:
        204:
          description: 'User has been removed'

  /auth/token:
    post:
      tags:
      - auth
      summary: Get access token
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: TokenPayload
        in: body
        description: User object
        required: true
        schema:
          type: object
          properties:
            username:
              type: string
              example: l.ruczkowski@gmail.com
            password:
              type: string
              example: password
      responses:
        200:
          description: 'Returns access token'
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: abcd
              token_type:
                type: string
                example: Bearer
              expires_in:
                type: integer
                example: 3600


definitions:
  UserModel:
    type: object
    properties:
      id:
        type: string
        example: 'a4nc-lAJve97S-nXN1vpQ6'
      email:
        type: string
        example: 'example@green-light.com'
      firstName:
        type: string
        example: 'Lukas'
      lastName:
        type: string
        example: 'Ruczkowski'

  UserObjectCreate:
    type: object
    properties:
      email:
        type: string
        example: 'example@green-light.com'
      password:
        type: string
        example: 'password'
      firstName:
        type: string
        example: 'Lukas'
      lastName:
        type: string
        example: 'Ruczkowski'

schemes:
- http

host: localhost:3000
basePath: /
